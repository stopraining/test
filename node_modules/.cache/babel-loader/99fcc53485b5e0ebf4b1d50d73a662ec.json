{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = cleanJSXElementLiteralChild;\n\nvar _generated = require(\"../../builders/generated\");\n\nfunction cleanJSXElementLiteralChild(child, args) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push((0, _generated.stringLiteral)(str));\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAGe,SAASA,2BAAT,CACbC,KADa,EAIbC,IAJa,EAKb;EACA,MAAMC,KAAK,GAAGF,KAAK,CAACG,KAANH,CAAYI,KAAZJ,CAAkB,YAAlBA,CAAd;EAEA,IAAIK,gBAAgB,GAAG,CAAvB;;EAEA,KAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,IAAIJ,KAAK,CAACI,CAAD,CAALJ,CAASM,KAATN,CAAe,QAAfA,CAAJ,EAA8B;MAC5BG,gBAAgB,GAAGC,CAAnBD;IACD;EACF;;EAED,IAAII,GAAG,GAAG,EAAV;;EAEA,KAAK,IAAIH,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,KAAK,CAACK,MAA1B,EAAkCD,CAAC,EAAnC,EAAuC;IACrC,MAAMI,IAAI,GAAGR,KAAK,CAACI,CAAD,CAAlB;IAEA,MAAMK,WAAW,GAAGL,CAAC,KAAK,CAA1B;IACA,MAAMM,UAAU,GAAGN,CAAC,KAAKJ,KAAK,CAACK,MAANL,GAAe,CAAxC;IACA,MAAMW,kBAAkB,GAAGP,CAAC,KAAKD,gBAAjC;IAGA,IAAIS,WAAW,GAAGJ,IAAI,CAACK,OAALL,CAAa,KAAbA,EAAoB,GAApBA,CAAlB;;IAGA,IAAI,CAACC,WAAL,EAAkB;MAChBG,WAAW,GAAGA,WAAW,CAACC,OAAZD,CAAoB,OAApBA,EAA6B,EAA7BA,CAAdA;IACD;;IAGD,IAAI,CAACF,UAAL,EAAiB;MACfE,WAAW,GAAGA,WAAW,CAACC,OAAZD,CAAoB,OAApBA,EAA6B,EAA7BA,CAAdA;IACD;;IAED,IAAIA,WAAJ,EAAiB;MACf,IAAI,CAACD,kBAAL,EAAyB;QACvBC,WAAW,IAAI,GAAfA;MACD;;MAEDL,GAAG,IAAIK,WAAPL;IACD;EACF;;EAED,IAAIA,GAAJ,EAASR,IAAI,CAACe,IAALf,CAAU,8BAAcQ,GAAd,CAAVR;AACV","names":["cleanJSXElementLiteralChild","child","args","lines","value","split","lastNonEmptyLine","i","length","match","str","line","isFirstLine","isLastLine","isLastNonEmptyLine","trimmedLine","replace","push"],"sources":["../../../src/utils/react/cleanJSXElementLiteralChild.ts"],"sourcesContent":["import { stringLiteral } from \"../../builders/generated\";\nimport type * as t from \"../..\";\n\nexport default function cleanJSXElementLiteralChild(\n  child: {\n    value: string;\n  },\n  args: Array<t.Node>,\n) {\n  const lines = child.value.split(/\\r\\n|\\n|\\r/);\n\n  let lastNonEmptyLine = 0;\n\n  for (let i = 0; i < lines.length; i++) {\n    if (lines[i].match(/[^ \\t]/)) {\n      lastNonEmptyLine = i;\n    }\n  }\n\n  let str = \"\";\n\n  for (let i = 0; i < lines.length; i++) {\n    const line = lines[i];\n\n    const isFirstLine = i === 0;\n    const isLastLine = i === lines.length - 1;\n    const isLastNonEmptyLine = i === lastNonEmptyLine;\n\n    // replace rendered whitespace tabs with spaces\n    let trimmedLine = line.replace(/\\t/g, \" \");\n\n    // trim whitespace touching a newline\n    if (!isFirstLine) {\n      trimmedLine = trimmedLine.replace(/^[ ]+/, \"\");\n    }\n\n    // trim whitespace touching an endline\n    if (!isLastLine) {\n      trimmedLine = trimmedLine.replace(/[ ]+$/, \"\");\n    }\n\n    if (trimmedLine) {\n      if (!isLastNonEmptyLine) {\n        trimmedLine += \" \";\n      }\n\n      str += trimmedLine;\n    }\n  }\n\n  if (str) args.push(stringLiteral(str));\n}\n"]},"metadata":{},"sourceType":"script"}