{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toBlock;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _generated2 = require(\"../builders/generated\");\n\nfunction toBlock(node, parent) {\n  if ((0, _generated.isBlockStatement)(node)) {\n    return node;\n  }\n\n  let blockNodes = [];\n\n  if ((0, _generated.isEmptyStatement)(node)) {\n    blockNodes = [];\n  } else {\n    if (!(0, _generated.isStatement)(node)) {\n      if ((0, _generated.isFunction)(parent)) {\n        node = (0, _generated2.returnStatement)(node);\n      } else {\n        node = (0, _generated2.expressionStatement)(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return (0, _generated2.blockStatement)(blockNodes);\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AAMA;;AAOe,SAASA,OAAT,CACbC,IADa,EAEbC,MAFa,EAGK;EAClB,IAAI,iCAAiBD,IAAjB,CAAJ,EAA4B;IAC1B,OAAOA,IAAP;EACD;;EAED,IAAIE,UAAyB,GAAG,EAAhC;;EAEA,IAAI,iCAAiBF,IAAjB,CAAJ,EAA4B;IAC1BE,UAAU,GAAG,EAAbA;EADF,OAEO;IACL,IAAI,CAAC,4BAAYF,IAAZ,CAAL,EAAwB;MACtB,IAAI,2BAAWC,MAAX,CAAJ,EAAwB;QACtBD,IAAI,GAAG,iCAAgBA,IAAhB,CAAPA;MADF,OAEO;QACLA,IAAI,GAAG,qCAAoBA,IAApB,CAAPA;MACD;IACF;;IAEDE,UAAU,GAAG,CAACF,IAAD,CAAbE;EACD;;EAED,OAAO,gCAAeA,UAAf,CAAP;AACD","names":["toBlock","node","parent","blockNodes"],"sources":["../../src/converters/toBlock.ts"],"sourcesContent":["import {\n  isBlockStatement,\n  isFunction,\n  isEmptyStatement,\n  isStatement,\n} from \"../validators/generated\";\nimport {\n  returnStatement,\n  expressionStatement,\n  blockStatement,\n} from \"../builders/generated\";\nimport type * as t from \"..\";\n\nexport default function toBlock(\n  node: t.Statement | t.Expression,\n  parent?: t.Node,\n): t.BlockStatement {\n  if (isBlockStatement(node)) {\n    return node;\n  }\n\n  let blockNodes: t.Statement[] = [];\n\n  if (isEmptyStatement(node)) {\n    blockNodes = [];\n  } else {\n    if (!isStatement(node)) {\n      if (isFunction(parent)) {\n        node = returnStatement(node);\n      } else {\n        node = expressionStatement(node);\n      }\n    }\n\n    blockNodes = [node];\n  }\n\n  return blockStatement(blockNodes);\n}\n"]},"metadata":{},"sourceType":"script"}