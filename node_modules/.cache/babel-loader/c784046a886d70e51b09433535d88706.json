{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toKeyAlias;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _cloneNode = require(\"../clone/cloneNode\");\n\nvar _removePropertiesDeep = require(\"../modifications/removePropertiesDeep\");\n\nfunction toKeyAlias(node, key = node.key) {\n  let alias;\n\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if ((0, _generated.isIdentifier)(key)) {\n    alias = key.name;\n  } else if ((0, _generated.isStringLiteral)(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify((0, _removePropertiesDeep.default)((0, _cloneNode.default)(key)));\n  }\n\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return toKeyAlias.uid = 0;\n  } else {\n    return toKeyAlias.uid++;\n  }\n};","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AACA;;AAGe,SAASA,UAAT,CACbC,IADa,EAEbC,GAAW,GAAGD,IAAI,CAACC,GAFN,EAGL;EACR,IAAIC,KAAJ;;EAGA,IAAIF,IAAI,CAACG,IAALH,KAAc,QAAlB,EAA4B;IAC1B,OAAOD,UAAU,CAACK,SAAXL,KAAyB,EAAhC;EADF,OAEO,IAAI,6BAAaE,GAAb,CAAJ,EAAuB;IAC5BC,KAAK,GAAGD,GAAG,CAACI,IAAZH;EADK,OAEA,IAAI,gCAAgBD,GAAhB,CAAJ,EAA0B;IAC/BC,KAAK,GAAGI,IAAI,CAACC,SAALD,CAAeL,GAAG,CAACO,KAAnBF,CAARJ;EADK,OAEA;IACLA,KAAK,GAAGI,IAAI,CAACC,SAALD,CAAe,mCAAqB,wBAAUL,GAAV,CAArB,CAAfK,CAARJ;EACD;;EAGD,IAAIF,IAAI,CAACS,QAAT,EAAmB;IACjBP,KAAK,GAAI,IAAGA,KAAM,GAAlBA;EACD;;EAGD,IAAIF,IAAI,CAACU,MAAT,EAAiB;IACfR,KAAK,GAAI,UAASA,KAAM,EAAxBA;EACD;;EAED,OAAOA,KAAP;AACD;;AAEDH,UAAU,CAACY,GAAXZ,GAAiB,CAAjBA;;AAEAA,UAAU,CAACK,SAAXL,GAAuB,YAAY;EACjC,IAAIA,UAAU,CAACY,GAAXZ,IAAkBa,MAAM,CAACC,gBAA7B,EAA+C;IAC7C,OAAQd,UAAU,CAACY,GAAXZ,GAAiB,CAAzB;EADF,OAEO;IACL,OAAOA,UAAU,CAACY,GAAXZ,EAAP;EACD;AALH","names":["toKeyAlias","node","key","alias","kind","increment","name","JSON","stringify","value","computed","static","uid","Number","MAX_SAFE_INTEGER"],"sources":["../../src/converters/toKeyAlias.ts"],"sourcesContent":["import { isIdentifier, isStringLiteral } from \"../validators/generated\";\nimport cloneNode from \"../clone/cloneNode\";\nimport removePropertiesDeep from \"../modifications/removePropertiesDeep\";\nimport type * as t from \"..\";\n\nexport default function toKeyAlias(\n  node: t.Method | t.Property,\n  key: t.Node = node.key,\n): string {\n  let alias;\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.kind`\n  if (node.kind === \"method\") {\n    return toKeyAlias.increment() + \"\";\n  } else if (isIdentifier(key)) {\n    alias = key.name;\n  } else if (isStringLiteral(key)) {\n    alias = JSON.stringify(key.value);\n  } else {\n    alias = JSON.stringify(removePropertiesDeep(cloneNode(key)));\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.computed`\n  if (node.computed) {\n    alias = `[${alias}]`;\n  }\n\n  // @ts-expect-error todo(flow->ts): maybe add node type check before checking `.static`\n  if (node.static) {\n    alias = `static:${alias}`;\n  }\n\n  return alias;\n}\n\ntoKeyAlias.uid = 0;\n\ntoKeyAlias.increment = function () {\n  if (toKeyAlias.uid >= Number.MAX_SAFE_INTEGER) {\n    return (toKeyAlias.uid = 0);\n  } else {\n    return toKeyAlias.uid++;\n  }\n};\n"]},"metadata":{},"sourceType":"script"}