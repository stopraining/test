{"ast":null,"code":"\"use strict\";\n\nrequire(\"core-js/modules/es.error.cause.js\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _generated = require(\"../validators/generated\");\n\nvar _default = toExpression;\nexports.default = _default;\n\nfunction toExpression(node) {\n  if ((0, _generated.isExpressionStatement)(node)) {\n    node = node.expression;\n  }\n\n  if ((0, _generated.isExpression)(node)) {\n    return node;\n  }\n\n  if ((0, _generated.isClass)(node)) {\n    node.type = \"ClassExpression\";\n  } else if ((0, _generated.isFunction)(node)) {\n    node.type = \"FunctionExpression\";\n  }\n\n  if (!(0, _generated.isExpression)(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}","map":{"version":3,"mappings":";;;;;;;;;AAAA;;eAQeA;;;AAQf,SAASA,YAAT,CACEC,IADF,EAEgB;EACd,IAAI,sCAAsBA,IAAtB,CAAJ,EAAiC;IAC/BA,IAAI,GAAGA,IAAI,CAACC,UAAZD;EACD;;EAQD,IAAI,6BAAaA,IAAb,CAAJ,EAAwB;IACtB,OAAOA,IAAP;EACD;;EAKD,IAAI,wBAAQA,IAAR,CAAJ,EAAmB;IAEjBA,IAAI,CAACE,IAALF,GAAY,iBAAZA;EAFF,OAGO,IAAI,2BAAWA,IAAX,CAAJ,EAAsB;IAE3BA,IAAI,CAACE,IAALF,GAAY,oBAAZA;EACD;;EAGD,IAAI,CAAC,6BAAaA,IAAb,CAAL,EAAyB;IACvB,MAAM,IAAIG,KAAJ,CAAW,eAAcH,IAAI,CAACE,IAAK,mBAAnC,CAAN;EACD;;EAED,OAAOF,IAAP;AACD","names":["toExpression","node","expression","type","Error"],"sources":["../../src/converters/toExpression.ts"],"sourcesContent":["import {\n  isExpression,\n  isFunction,\n  isClass,\n  isExpressionStatement,\n} from \"../validators/generated\";\nimport type * as t from \"..\";\n\nexport default toExpression as {\n  (node: t.Function): t.FunctionExpression;\n  (node: t.Class): t.ClassExpression;\n  (\n    node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n  ): t.Expression;\n};\n\nfunction toExpression(\n  node: t.ExpressionStatement | t.Expression | t.Class | t.Function,\n): t.Expression {\n  if (isExpressionStatement(node)) {\n    node = node.expression;\n  }\n\n  // return unmodified node\n  // important for things like ArrowFunctions where\n  // type change from ArrowFunction to FunctionExpression\n  // produces bugs like -> `()=>a` to `function () a`\n  // without generating a BlockStatement for it\n  // ref: https://github.com/babel/babili/issues/130\n  if (isExpression(node)) {\n    return node;\n  }\n\n  // convert all classes and functions\n  // ClassDeclaration -> ClassExpression\n  // FunctionDeclaration, ObjectMethod, ClassMethod -> FunctionExpression\n  if (isClass(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"ClassExpression\";\n  } else if (isFunction(node)) {\n    // @ts-expect-error todo(flow->ts): avoid type unsafe mutations\n    node.type = \"FunctionExpression\";\n  }\n\n  // if it's still not an expression\n  if (!isExpression(node)) {\n    throw new Error(`cannot turn ${node.type} to an expression`);\n  }\n\n  return node;\n}\n"]},"metadata":{},"sourceType":"script"}