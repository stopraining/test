{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.PLACEHOLDERS_FLIPPED_ALIAS = exports.PLACEHOLDERS_ALIAS = exports.PLACEHOLDERS = void 0;\n\nvar _utils = require(\"./utils\");\n\nconst PLACEHOLDERS = [\"Identifier\", \"StringLiteral\", \"Expression\", \"Statement\", \"Declaration\", \"BlockStatement\", \"ClassBody\", \"Pattern\"];\nexports.PLACEHOLDERS = PLACEHOLDERS;\nconst PLACEHOLDERS_ALIAS = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"]\n};\nexports.PLACEHOLDERS_ALIAS = PLACEHOLDERS_ALIAS;\n\nfor (const type of PLACEHOLDERS) {\n  const alias = _utils.ALIAS_KEYS[type];\n  if (alias != null && alias.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nconst PLACEHOLDERS_FLIPPED_ALIAS = {};\nexports.PLACEHOLDERS_FLIPPED_ALIAS = PLACEHOLDERS_FLIPPED_ALIAS;\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});","map":{"version":3,"mappings":";;;;;;;AAAA;;AAEO,MAAMA,YAAY,GAAG,CAC1B,YAD0B,EAE1B,eAF0B,EAG1B,YAH0B,EAI1B,WAJ0B,EAK1B,aAL0B,EAM1B,gBAN0B,EAO1B,WAP0B,EAQ1B,SAR0B,CAArB;;AAWA,MAAMC,kBAA4C,GAAG;EAC1DC,WAAW,EAAE,CAAC,WAAD,CAD6C;EAE1DC,OAAO,EAAE,CAAC,aAAD,EAAgB,MAAhB;AAFiD,CAArD;;;AAKP,KAAK,MAAMC,IAAX,IAAmBJ,YAAnB,EAAiC;EAC/B,MAAMK,KAAK,GAAGC,kBAAWF,IAAXE,CAAd;EACA,IAAID,KAAJ,QAAIA,SAAK,CAAEE,MAAX,EAAmBN,kBAAkB,CAACG,IAAD,CAAlBH,GAA2BI,KAA3BJ;AACpB;;AAEM,MAAMO,0BAAoD,GAAG,EAA7D;;AAEPC,MAAM,CAACC,IAAPD,CAAYR,kBAAZQ,EAAgCE,OAAhCF,CAAwCL,IAAI,IAAI;EAC9CH,kBAAkB,CAACG,IAAD,CAAlBH,CAAyBU,OAAzBV,CAAiCI,KAAK,IAAI;IACxC,IAAI,CAACI,MAAM,CAACG,cAAPH,CAAsBI,IAAtBJ,CAA2BD,0BAA3BC,EAAuDJ,KAAvDI,CAAL,EAAoE;MAClED,0BAA0B,CAACH,KAAD,CAA1BG,GAAoC,EAApCA;IACD;;IACDA,0BAA0B,CAACH,KAAD,CAA1BG,CAAkCM,IAAlCN,CAAuCJ,IAAvCI;EAJF;AADF","names":["PLACEHOLDERS","PLACEHOLDERS_ALIAS","Declaration","Pattern","type","alias","ALIAS_KEYS","length","PLACEHOLDERS_FLIPPED_ALIAS","Object","keys","forEach","hasOwnProperty","call","push"],"sources":["../../src/definitions/placeholders.ts"],"sourcesContent":["import { ALIAS_KEYS } from \"./utils\";\n\nexport const PLACEHOLDERS = [\n  \"Identifier\",\n  \"StringLiteral\",\n  \"Expression\",\n  \"Statement\",\n  \"Declaration\",\n  \"BlockStatement\",\n  \"ClassBody\",\n  \"Pattern\",\n] as const;\n\nexport const PLACEHOLDERS_ALIAS: Record<string, string[]> = {\n  Declaration: [\"Statement\"],\n  Pattern: [\"PatternLike\", \"LVal\"],\n};\n\nfor (const type of PLACEHOLDERS) {\n  const alias = ALIAS_KEYS[type];\n  if (alias?.length) PLACEHOLDERS_ALIAS[type] = alias;\n}\n\nexport const PLACEHOLDERS_FLIPPED_ALIAS: Record<string, string[]> = {};\n\nObject.keys(PLACEHOLDERS_ALIAS).forEach(type => {\n  PLACEHOLDERS_ALIAS[type].forEach(alias => {\n    if (!Object.hasOwnProperty.call(PLACEHOLDERS_FLIPPED_ALIAS, alias)) {\n      PLACEHOLDERS_FLIPPED_ALIAS[alias] = [];\n    }\n    PLACEHOLDERS_FLIPPED_ALIAS[alias].push(type);\n  });\n});\n"]},"metadata":{},"sourceType":"script"}