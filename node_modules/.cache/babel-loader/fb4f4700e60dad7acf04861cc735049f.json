{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = toIdentifier;\n\nvar _isValidIdentifier = require(\"../validators/isValidIdentifier\");\n\nvar _helperValidatorIdentifier = require(\"@babel/helper-validator-identifier\");\n\nfunction toIdentifier(input) {\n  input = input + \"\";\n  let name = \"\";\n\n  for (const c of input) {\n    name += (0, _helperValidatorIdentifier.isIdentifierChar)(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  name = name.replace(/^[-0-9]+/, \"\");\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!(0, _isValidIdentifier.default)(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}","map":{"version":3,"mappings":";;;;;;;AAAA;;AACA;;AAEe,SAASA,YAAT,CAAsBC,KAAtB,EAA6C;EAC1DA,KAAK,GAAGA,KAAK,GAAG,EAAhBA;EAGA,IAAIC,IAAI,GAAG,EAAX;;EACA,KAAK,MAAMC,CAAX,IAAgBF,KAAhB,EAAuB;IACrBC,IAAI,IAAI,iDAAiBC,CAAC,CAACC,WAAFD,CAAc,CAAdA,CAAjB,IAAqCA,CAArC,GAAyC,GAAjDD;EACD;;EAGDA,IAAI,GAAGA,IAAI,CAACG,OAALH,CAAa,UAAbA,EAAyB,EAAzBA,CAAPA;EAGAA,IAAI,GAAGA,IAAI,CAACG,OAALH,CAAa,aAAbA,EAA4B,UAAUI,KAAV,EAAiBH,CAAjB,EAAoB;IACrD,OAAOA,CAAC,GAAGA,CAAC,CAACI,WAAFJ,EAAH,GAAqB,EAA7B;EADK,EAAPD;;EAIA,IAAI,CAAC,gCAAkBA,IAAlB,CAAL,EAA8B;IAC5BA,IAAI,GAAI,IAAGA,IAAK,EAAhBA;EACD;;EAED,OAAOA,IAAI,IAAI,GAAf;AACD","names":["toIdentifier","input","name","c","codePointAt","replace","match","toUpperCase"],"sources":["../../src/converters/toIdentifier.ts"],"sourcesContent":["import isValidIdentifier from \"../validators/isValidIdentifier\";\nimport { isIdentifierChar } from \"@babel/helper-validator-identifier\";\n\nexport default function toIdentifier(input: string): string {\n  input = input + \"\";\n\n  // replace all non-valid identifiers with dashes\n  let name = \"\";\n  for (const c of input) {\n    name += isIdentifierChar(c.codePointAt(0)) ? c : \"-\";\n  }\n\n  // remove all dashes and numbers from start of name\n  name = name.replace(/^[-0-9]+/, \"\");\n\n  // camel case\n  name = name.replace(/[-\\s]+(.)?/g, function (match, c) {\n    return c ? c.toUpperCase() : \"\";\n  });\n\n  if (!isValidIdentifier(name)) {\n    name = `_${name}`;\n  }\n\n  return name || \"_\";\n}\n"]},"metadata":{},"sourceType":"script"}